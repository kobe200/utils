/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.kobe.kobedemo.log;

import android.os.StatFs;
import android.util.Log;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

/**
 * 复制文件或文件夹
 * <p>
 * zww
 */
public class CopyFileUtil {

    public static final String TAG = CopyFileUtil.class.getSimpleName();
    private static String MESSAGE = "";

    private double totalSize;

    public CopyFileUtil(double size) {
        super();
        totalSize = size;
    }

    /**
     * 读取提供的硬件码
     * @param fileName File的绝对路径
     * @return
     */

    public static String readFile(String fileName) {
        File file = new File(fileName);
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        if(file.exists()) {
            try {
                fileInputStream = new FileInputStream(file);
                br = new BufferedReader(new InputStreamReader(fileInputStream));
                String data = null;
                String read = null;
                while((data = br.readLine()) != null) {
                    Log.i(TAG,"data-->" + data);
                    read = data;
                    if(read.startsWith("0x")) {
                        read = read.substring(2,read.length());
                    }
                }
                return read;
            } catch(IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    fileInputStream.close();
                    br.close();
                } catch(IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    /**
     * 写入U盘
     * @param filename U盘中的文件绝对路径及文件名
     */

    public static void writeToFile(String filename,String hardwareVersion) {
        File file = new File(filename);
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file,true)));
            out.write(hardwareVersion);
            out.write("\r\n");
        } catch(Exception e) {
            Log.e(TAG,"Failed to write to HardwareNumber.cfg");
            e.printStackTrace();
        } finally {
            try {
                out.close();
            } catch(IOException e) {
                e.printStackTrace();
            }

        }

    }

    /**
     * 复制单个文件
     * @param oldFile String 原文件路径 如：c:/fqf.txt
     * @param newPath String 复制后路径 如：f:/fqf.txt
     * @return boolean
     */
    public static boolean copyFile(File oldFile,String newPath) {
        boolean copySucces = true;
        InputStream inStream = null;
        FileOutputStream fs = null;
        try {
            int byteread = 0;
            // 读入原文件
            inStream = new FileInputStream(oldFile);
            fs = new FileOutputStream(newPath);
            byte[] buffer = new byte[1444];
            while((byteread = inStream.read(buffer)) != -1) {
                fs.write(buffer,0,byteread);
            }
            inStream.close();
        } catch(Exception e) {
            copySucces = false;
            e.printStackTrace();
        } finally {
            try {
                if(inStream != null) {
                    inStream.close();
                }
                if(fs != null) {
                    fs.close();
                }
            } catch(IOException e) {
                e.printStackTrace();
            }
        }
        return copySucces;
    }

    /**
     * 复制整个文件夹内容
     * @param oldPath String 原文件路径 如：c:/fqf
     * @param newPath String 复制后路径 如：f:/fqf/ff
     * @return boolean
     */
    public static void copyFolder(String oldPath,String newPath) {

        try {
            // 如果文件夹不存在 则建立新文件夹
            (new File(newPath)).mkdirs();
            File a = new File(oldPath);
            String[] file = a.list();
            File temp = null;
            for(int i = 0; i < file.length; i++) {
                if(oldPath.endsWith(File.separator)) {
                    temp = new File(oldPath + file[i]);
                } else {
                    temp = new File(oldPath + File.separator + file[i]);
                }

                if(temp.isFile()) {
                    FileInputStream input = new FileInputStream(temp);
                    FileOutputStream output = new FileOutputStream(newPath + "/" + (temp.getName()).toString());
                    byte[] b = new byte[1024 * 5];
                    int len;
                    while((len = input.read(b)) != -1) {
                        output.write(b,0,len);
                    }
                    output.flush();
                    output.close();
                    input.close();
                }
                // 如果是子文件夹
                if(temp.isDirectory()) {
                    copyFolder(oldPath + "/" + file[i],newPath + "/" + file[i]);
                }
            }
        } catch(Exception e) {
            System.out.println("复制整个文件夹内容操作出错");
            e.printStackTrace();
        }
    }

    /**
     * 复制单个文件
     * @param srcFileName 待复制的文件名
     * @param destFileName 目标文件名
     * @param overlay 如果目标文件存在，是否覆盖
     * @return 如果复制成功返回true，否则返回false
     */
    public boolean copyFile(String srcFileName,String destFileName,boolean overlay) {
        File srcFile = new File(srcFileName);
        // 判断源文件是否存在
        if(!srcFile.exists()) {
            MESSAGE = "源文件：" + srcFileName + "不存在！";
            Log.d(TAG,MESSAGE);
            return false;
        } else if(!srcFile.isFile()) {
            MESSAGE = "复制文件失败，源文件：" + srcFileName + "不是一个文件！";
            Log.d(TAG,MESSAGE);
            return false;
        }

        // 判断目标文件是否存在
        File destFile = new File(destFileName);
        if(destFile.exists()) {
            // 如果目标文件存在并允许覆盖
            if(overlay) {
                // 删除已经存在的目标文件，无论目标文件是目录还是单个文件
                new File(destFileName).delete();
            }
        } else {
            // 如果目标文件所在目录不存在，则创建目录
            if(!destFile.getParentFile().exists()) {
                // 目标文件所在目录不存在
                if(!destFile.getParentFile().mkdirs()) {
                    // 复制文件失败：创建目标文件所在目录失败
                    return false;
                }
            }
        }
        Log.d(TAG,"=====copy file======" + srcFileName);
        // 复制文件
        return nioBufferCopy(srcFile,destFile);
    }

    private boolean nioBufferCopy(File source,File target) {
        FileChannel in = null;
        FileChannel out = null;
        FileInputStream inStream = null;
        FileOutputStream outStream = null;
        try {
            inStream = new FileInputStream(source);
            outStream = new FileOutputStream(target);
            in = inStream.getChannel();
            out = outStream.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(128 * 1024);
            while(in.read(buffer) != -1) {
                buffer.flip();
                out.write(buffer);
                buffer.clear();
            }

            return true;
        } catch(IOException e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                inStream.close();
                in.close();
                outStream.close();
                out.close();
            } catch(IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 复制整个目录的内容
     * @param srcDirName 待复制目录的目录名
     * @param destDirName 目标目录名
     * @param overlay 如果目标目录存在，是否覆盖
     * @return 如果复制成功返回true，否则返回false
     */
    public boolean copyDirectory(String srcDirName,String destDirName,boolean overlay) {
        // 判断源目录是否存在
        File srcDir = new File(srcDirName);
        if(!srcDir.exists()) {
            MESSAGE = "复制目录失败：源目录" + srcDirName + "不存在！";
            Log.d(TAG,MESSAGE);
            return false;
        } else if(!srcDir.isDirectory()) {
            MESSAGE = "复制目录失败：" + srcDirName + "不是目录！";
            Log.d(TAG,MESSAGE);
            return false;
        }

        // 如果目标目录名不是以文件分隔符结尾，则加上文件分隔符
        if(!destDirName.endsWith(File.separator)) {
            destDirName = destDirName + File.separator;
        }
        File destDir = new File(destDirName);
        // 如果目标文件夹存在
        if(destDir.exists()) {
            // 如果允许覆盖则删除已存在的目标目录
            if(overlay) {
                new File(destDirName).delete();
            } else {
                MESSAGE = "复制目录失败：目的目录" + destDirName + "已存在！";
                Log.d(TAG,MESSAGE);
                return false;
            }
        } else {
            // 创建目的目录
            System.out.println("目的目录不存在，准备创建。。。");
            if(!destDir.mkdirs()) {
                System.out.println("复制目录失败：创建目的目录失败！");
                return false;
            }
        }

        boolean flag = true;
        File[] files = srcDir.listFiles();
        for(int i = 0; i < files.length; i++) {
            // 复制文件
            if(files[i].isFile()) {
                flag = copyFile(files[i].getAbsolutePath(),destDirName + files[i].getName(),overlay);
                if(!flag) {
                    break;
                }
            } else if(files[i].isDirectory()) {
                flag = copyDirectory(files[i].getAbsolutePath(),destDirName + files[i].getName(),overlay);
                if(!flag) {
                    break;
                }
            }
        }
        if(!flag) {
            MESSAGE = "复制目录" + srcDirName + "至" + destDirName + "失败！";
            Log.d(TAG,MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    public void copyOrder(String filePath , String usbPath){
        try {
            Runtime.getRuntime().exec("cp  " + filePath + "  " + usbPath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static UsbDeviceInfo fileSize(String path) {
        UsbDeviceInfo info = null;
        try {
            StatFs statfs = new StatFs(path);
            // 获取SDCard上BLOCK总数
            long nTotalBlocks = statfs.getBlockCountLong();
            Log.i(TAG,"===nTotalBlocks===" + nTotalBlocks);
            // 获取SDCard上每个block的SIZE
            long nBlocSize = statfs.getBlockSizeLong();
            Log.i(TAG,"===nBlocSize===" + nBlocSize);
            // 获取可供程序使用的Block的数量
            long nAvailaBlock = statfs.getAvailableBlocksLong();
            Log.i(TAG,"===nAvailaBlock===" + nAvailaBlock);
            // 获取剩下的所有Block的数量(包括预留的一般程序无法使用的块)
            long nFreeBlock = statfs.getFreeBlocksLong();
            Log.i(TAG,"===nFreeBlock===" + nFreeBlock);
            info = new UsbDeviceInfo();
            // 计算SDCard 总容量大小MB
            info.total = nTotalBlocks * nBlocSize;
            Log.i(TAG,"===info.total===" + info.total);
            // 计算 SDCard 剩余大小MB
            info.free = nAvailaBlock * nBlocSize;
            Log.i(TAG,"===info.free===" + info.free);
        } catch(IllegalArgumentException e) {
            Log.e(TAG,e.toString());
        }
        return info;
    }

    public static class UsbDeviceInfo {
        public long total;
        public long free;
    }

}
